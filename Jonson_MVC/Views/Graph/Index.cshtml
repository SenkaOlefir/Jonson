@{
    ViewBag.Title = "Home Page";
}

@model Jonson_MVC.Models.GraphJsonModel

@Styles.Render("~/Content/vis")

<div class="row">
    <div class="col-md-7">
        <div id="mynetwork"></div>
    </div>
    <div class="col-md-3">
        <form id="shortest-path">
            <div class="form-horizontal">
                <h4>Введите пару вершин</h4>
                <hr />
                <div class="form-group">
                    <label class="control-label col-md-2">От</label>
                    <div class="col-md-4">
                        <input class="form-control" />
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-2">До</label>
                    <div class="col-md-4">
                        <input class="form-control" />
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-5">
                        <input type="submit" value="Найти" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </form>
        <div id="path">

        </div>
    </div>
</div>

@Scripts.Render("~/bundles/vis")

@section scripts {
    <script type="text/javascript">
        var nodes = JSON.parse('@Html.Raw(Json.Encode(Model.Nodes))');
        var edges = JSON.parse('@Html.Raw(Json.Encode(Model.Edges))');
       
        // create a network
        var container = document.getElementById('mynetwork');
        var data = {
            nodes: new vis.DataSet(nodes),
            edges: new vis.DataSet(edges)
        };
        var options = {
            height: '500px',
            physics: {
                forceAtlas2Based: {
                    gravitationalConstant: -26,
                    centralGravity: 0.005,
                    springLength: 230,
                    springConstant: 0.18
                },
                maxVelocity: 146,
                solver: 'forceAtlas2Based',
                timestep: 0.35,
                stabilization: { iterations: 150 }
            }
        };
        var network = new vis.Network(container, data, options);

        $(document).ready(function () {
            $("#shortest-path").submit(function (form) {
                var from = form.currentTarget[0].value;
                var to = form.currentTarget[1].value
                
                $.ajax({
                    url: '@Url.Action("CalculatePath", "Graph")',
                    data: { from: from, to: to },
                    contentType: "application/json",
                    dataType: "json",
                    success: function (json) {
                        if (json.isError !== undefined && json.isError) {
                            alert(json.errorMessage);
                            return;
                        }
                        var nodes = [];
                        var edges = [];

                        for (var i = 0; i < json.length; i++) {
                            nodes.push({ id: json[i].Key, label: json[i].Key });
                        }

                        for (var i = 0; i < json.length - 1; i++) {
                            edges.push({ from: json[i].Key, to: json[i + 1].Key, arrows: "to", label: json[i + 1].Value });
                        }

                        var container = document.getElementById('path');
                        var data = {
                            nodes: new vis.DataSet(nodes),
                            edges: new vis.DataSet(edges)
                        };
                        var options = {
                            height: '300px',
                            physics: {
                                forceAtlas2Based: {
                                    gravitationalConstant: -26,
                                    centralGravity: 0.005,
                                    springLength: 230,
                                    springConstant: 0.18
                                },
                                maxVelocity: 146,
                                solver: 'forceAtlas2Based',
                                timestep: 0.35,
                                stabilization: { iterations: 150 }
                            }
                        };
                        var network = new vis.Network(container, data, options);

                    }
                })

                return false;
            });
        });
    </script>
}